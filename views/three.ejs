<html>
	<head>
		<meta charset='utf-8'>
		<meta name="description" content="Gala: Learn how to program by commanding a robot army in space!">
		<meta name="author" content="Kevin Hwang & Ajay Tripathy">
		<title>SO CINEMATIC</title>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
		<link href="http://twitter.github.com/bootstrap/assets/css/bootstrap.css" rel="stylesheet">
		<link href="http://twitter.github.com/bootstrap/assets/css/bootstrap-responsive.css" rel="stylesheet">
		<link href="/static/three.css" rel="stylesheet">
		<script src="/nowjs/now.js"></script>
		<!--HTML5 shim, for IE6-8 support of HTML5 elements. Does it actually work? No clue, but here's to hoping it does!-->

		<!--[if lt IE 9]>
			<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		<![endif]-->
		<script src="/static/Three.js"></script>

		<script>


		var camera, scene, renderer, geometry, material, mesh;

		var board = null;

		var maxX = 9;
		var maxY = 9;

		var shipToThree = {};

		$(document).ready(function () {

			now.ready( function () {
				now.getChanges = function (changes) {
					updateBoard(changes);
				}
			});

			board = new Array(maxX+1);

			for (var i = 0; i <= maxX; i++) {
				board[i] = new Array(maxX+1);
			}

			for (var i = 0; i <= maxX; i++) {
				for (var j = 0; j <= maxY; j++) {
					board[i][j] = null;
				}
			}
			init();
			//animate();
		});

		var loadSpaceShip = function (boardObj) {
			var loader = new THREE.JSONLoader();
			var material = new THREE.MeshBasicMaterial({color:0xff0000, wireframe: true});
			loader.load('/static/ship.js', function (geometry) {
				console.log("loadan")
				var mesh = new THREE.Mesh(geometry, material);
				mesh.position.x = boardObj.position.x * 50;
				mesh.position.z = boardObj.position.y * 50;
				mesh.scale.x = mesh.scale.y = mesh.scale.z = 10;
				scene.add(mesh);
				console.log(mesh)
				shipToThree[boardObj.shipId] = mesh
				var heading = boardObj.facing;
				if (heading == "up") {
    				mesh.rotation.y = Math.PI * 1/2;

    			} else if (heading == "right") {
    				mesh.rotation.y = Math.PI * 0;

    			} else if (heading == "down") {
    				mesh.rotation.y = Math.PI * 3/2;

    			} else if (heading == "left") {
    				mesh.rotation.y = Math.PI * 1;

    			}
				//remove this later and just cycle eventually. it makes everything very slow D:
				requestAnimationFrame(animate);
			});
		}

		var init = function () {
			$.post("/getBoardState", function (data) {
				board = data;

				scene = new THREE.Scene();

		        camera = new THREE.PerspectiveCamera( 75, 1, 1, 10000 );
		        camera.position.y = 500;
		        camera.position.z = 1200;
		        camera.lookAt(new THREE.Vector3(0,0,0))
		        scene.add( camera );
		        console.log("get board state")

		        for (var i = 0; i <= maxX; i++) {
		        	for (var j = 0; j <= maxY; j++) {
		        		var boardObj = data[i][j];
		        		if (boardObj.type == "Space") {
		        			//add nothing for now

		        		} else if (boardObj.type == "Ship") {
		        			console.log("SHIP")
		        			console.log(boardObj.position);

		        			//var heading = boardObj.facing

		        			loadSpaceShip(boardObj)

		        			/*
		        			var geometry = new THREE.CubeGeometry(50,50,50);

		        			//console.log(geometry)
		        			var material = new THREE.MeshBasicMaterial({color:0xff0000, wireframe: true});
		        			var mesh = new THREE.Mesh(geometry, material);
		        			mesh.position.x = boardObj.position.x * 50;
		        			mesh.position.z = boardObj.position.y * 50;
		        			
							

		        			//mesh.matrixAutoUpdate = false;
		        			
		        			if (heading == "up") {
		        				mesh.rotation.y = Math.PI * 1/2;

		        			} else if (heading == "right") {
		        				mesh.rotation.y = Math.PI * 0;

		        			} else if (heading == "down") {
		        				mesh.rotation.y = Math.PI * 3/2;

		        			} else if (heading == "left") {
		        				mesh.rotation.y = Math.PI * 1;

		        			}
		        			
		        			scene.add(mesh)
		        			shipToThree[boardObj.shipId] = mesh
		        			*/
		        		} else {
		        			alert('wat');
		        		}
		        	}
		        }

		        renderer = new THREE.CanvasRenderer();
		        renderer.setClearColorHex(0x000000);
		        renderer.setSize( 500, 500 );

		        document.getElementById("gameBoardDiv").appendChild( renderer.domElement );
		        animate();
	        });
    	}

    	var updateBoard = function (data) {
			console.log('updating!');
			console.log(data)
			clearBullets()
			var newBoard = data.board;
			var turns = data.turns;
			var moves = data.moves;
			var shots = data.shots;
			var firstDestroyed = data.destroyed.filter(function (n) {return n.manner=="crashed"});
			var secondDestroyed = data.destroyed.filter(function (n) {return n.manner=="shots"});

			//verifyBoard(newBoard);
			displayTurnsAndMoves(turns,moves)
			displayDestruction(firstDestroyed);
			displayShots(shots);
			displayDestruction(secondDestroyed);
			board = newBoard;
			requestAnimationFrame(animate)
		}

		var displayTurnsAndMoves = function (turns, moves) {
			
			for (i in turns) {
				console.log('TURNING!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
				var ship = turns[i].ship;
				var shipId = ship.shipId;
				var facing = turns[i].direction;
				console.log(facing);
				//var oldFacing = board[ship.position.x][ship.position.y].facing;
				var turn = null;
				var dirToDeg = {
					'up' : 0,
					'right' : 90,
					'down' : 180,
					'left' : 270
				}

				var relRot = {
					'right': -90,
					'left' : 90
				}
				//var degree = dirToDeg[facing] - dirToDeg[oldFacing]
				var degree = relRot[facing]
				shipToThree[shipId].rotation.y += degree * Math.PI / 180;
				//paper.getById(shipRaphaelHash[shipId]).transform("...r"+degree)
				//paper.getById(shipRaphaelHash[shipId]).transform("...r"+degree)
			}
			console.log('displayingMoves');
			
			for (i in moves) {
				console.log('translation')
				var ship = moves[i].ship;
				var shipId = ship.shipId;
				var distance = moves[i].distance;
				shipToThree[shipId].translateX(distance*50);
				//paper.getById(shipRaphaelHash[shipId]).transform("r180");
				//paper.getById(shipRaphaelHash[shipId]).transform("...t0,-"+distance*50);
				//paper.getById(shipRaphaelHash[shipId]).animate({transform: "...t"+distance*50})
			}
			//requestAnimationFrame(animate)
		}

		var displayShots = function (shots) {
			console.log("display shooting");
			for (i in shots) {
				var ship = shots[i].ship;
				var shipId = ship.shipId;
				var shipX = ship.position.x;
				var shipY = ship.position.y;
				var bulletX = shots[i].finalDest.x;
				var bulletY = shots[i].finalDest.y;

				if ((shipX !== bulletX) && (shipY !== bulletY)) {
					console.log("something terrible has happened :(");
					break;
				}

				if (shipY === bulletY) {
					console.log("ships have same Y");
					if (shipX > bulletX) {
						for (var i = bulletX; i < shipX; i++) {
							drawBullet(i,bulletY);
							
						}
					} else if (shipX < bulletX) {
						for (var i = shipX+1; i <= bulletX; i++) {
							drawBullet(i,bulletY);
					
						}
					}
				} else if (shipX === bulletX) {
					if (shipY > bulletY) {
						for (var i = bulletY; i < shipY; i++) {
							drawBullet(bulletX,i);
							
						}
					} else if (shipY < bulletY) {
						for (var i = shipY+1; i <= bulletY; i++) {
							drawBullet(bulletX,i);
							
						}
					}
				}
			}
			requestAnimationFrame(animate)
		}

		var bulletLocations = [];

		var drawBullet = function (x,y) {
			console.log("X: "+x);
			console.log("Y: "+y);
			//var newShip = paper.triangle(xPos*50+25,yPos*50+10,30);
			var bullet = new THREE.Mesh(
				new THREE.SphereGeometry(
					10),
				new THREE.MeshLambertMaterial({
					color: 0xCC0000
				}));
			//var bullet = paper.circle(x*50+25,y*50+25,10);
			//bullet.attr({fill:"black"});
			bullet.position.x = x * 50
			bullet.position.z = y * 50
			scene.add(bullet);

			bulletLocations.push(bullet);
		}

		var clearBullets = function () {
			console.log("clearing bullets");
			for (i in bulletLocations) {
				//bulletLocations[i].remove();
				scene.remove(bulletLocations[i]);
			}
			bulletLocations = [];
			requestAnimationFrame(animate)
		}

		var displayDestruction = function (destroyed) {
			console.log("destroying");
			console.log(destroyed)
			for (i in destroyed) {
				//var ship = destroyed[i].ship;
				//var shipId = ship.shipId;
				var shipId = destroyed[i].shipId
				//paper.getById(shipRaphaelHash[shipId]).remove();
				scene.remove(shipToThree[shipId])
			}
			requestAnimationFrame(animate)
		}

		var testRotate = function () {
			shipToThree[1].rotation.y += 3.14/4
			requestAnimationFrame(animate);
		}

		var testTranslate = function () {
			shipToThree[3].translateZ(50);
			requestAnimationFrame(animate);
		}

		var testShooting = function () {
			console.log("pew pew")
			var shots = []
			/*var ship = shots[i].ship;
				var shipId = ship.shipId;
				var shipX = ship.position.x;
				var shipY = ship.position.y;
				var bulletX = shots[i].finalDest.x;
				var bulletY = shots[i].finalDest.y;*/
			shots.push({ship: {shipId: 3, position:{x:9,y:8}}, finalDest: {x:7,y:8}});
			displayShots(shots);
		}

		var testDestruction = function () {
			console.log("kaboom")
			var destroyed = []
			/*var ship = shots[i].ship;
				var shipId = ship.shipId;
				var shipX = ship.position.x;
				var shipY = ship.position.y;
				var bulletX = shots[i].finalDest.x;
				var bulletY = shots[i].finalDest.y;*/
			destroyed.push({ship: {shipId: 3, position:{x:9,y:8}}, finalDest: {x:7,y:8}});
			displayDestruction(destroyed);
		}


		var animate = function () {
			//requestAnimationFrame(animate);
			render();
		}

		var render = function () {
			//mesh.rotation.x += 0.01;
			//mesh.rotation.y += 0.02;
			renderer.render(scene, camera);
		}
		</script>
	</head>

	<body>
		<div class="navbar navbar-fixed-top">
			<div class="navbar-inner">
				<div class="container">
					<a class="brand" href="#">Gala</a>
				</div>
			</div>
		</div>
		<div id="content">
			<div class="hero">
				<h1>ThreeJS--3x as GOOD</h1>
			</div>
			<div class="container">


				<div class="row">
					<div class="span12">
						<p>Do a loop: ask for the board state and then display it.</p>
						<!--
						<button onclick="testRotate()">TEST ROTATE!!!</button>
						<button onclick="testTranslate()">TEST TRANSLATE!!!</button>
						<button onclick="testShooting()">TEST SHOOTING!!!</button>
						<button onclick="clearBullets()">CLEAR BULLETS!!!</button>
					-->
					</div>
					</div>
				</div>

				<div class="row">
					<div class="span12" id="gameBoardDiv">
					</div>
				</div>

				<hr>
				<footer>
					<p>&copy; Ajay Tripathy & Kevin Hwang 2012</p>
				</footer>
			</div>
		</div>

	</body>
</html>