<html>
	<head>
		<meta charset='utf-8'>
		<meta name="description" content="Gala: Learn how to program by commanding a robot army in space!">
		<meta name="author" content="Kevin Hwang & Ajay Tripathy">
		<title>RAPHAEL TEST</title>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
		<link href="http://twitter.github.com/bootstrap/assets/css/bootstrap.css" rel="stylesheet">
		<link href="http://twitter.github.com/bootstrap/assets/css/bootstrap-responsive.css" rel="stylesheet">
		<link href="/static/raphael.css" rel="stylesheet">
		<script src="/nowjs/now.js"></script>

		<!--HTML5 shim, for IE6-8 support of HTML5 elements. Does it actually work? No clue, but here's to hoping it does!-->

		<!--[if lt IE 9]>
			<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		<![endif]-->

		<script src="/static/raphael-min.js"></script>
		<script>
			//this should realy come with Raphael but it doesn't.
			Raphael.fn.triangle = function (x, y, size) {
				var path = ["M",x,y];
				path = path.concat(["L", (x + size/2), (y+size)]);
				path = path.concat(["L", (x - size / 2), (y+size)]);
				return this.path(path.concat(["z"]).join(" "));
			}
		</script>
		<script>
			//Note: left is red, right is blue
			//ids are: playerLeft, playerRight

			var board = null;

			var shipRaphaelHash = {}

			var maxX = 9;
			var maxY = 9;

			var t = null;
			var paper = null;

			$(document).ready(function () {
				console.log("ready and waiting");
				now.ready( function () {
					now.getChanges = function (changes) {
						updateBoard(changes);
					}
				});

				$("#submitOrders").click(function () {
					var orders = $("#ordersForm").val();
					console.log(orders)
					console.log('clicky')	
				})




				board = new Array(maxX+1);

				for (var i = 0; i <= maxX; i++) {
					board[i] = new Array(maxX+1);
				}

				for (var i = 0; i <= maxX; i++) {
					for (var j = 0; j <= maxY; j++) {
						board[i][j] = null;
					}
				}
				initializeBoard();
			});
		</script>


		<script>
			//raphael's grid system goes: x: 0 -> 9 and y: 9 -> 0 (i.e. y increases from top to bottom)
			//todo: fix it :3

			var t = null;

			var allShips = [];


			var initializeBoard = function () {
				paper = Raphael("gameBoardDiv",500,500);
				for (var i = 0; i <= maxX; i++) {
					for (var j = 0; j <= maxY; j++) {
						var rect = paper.rect(i*50,j*50,50,50);
						rect.attr({fill: "green"});
						//rect.node.id="cell"+i+","+j
					}
				}
				loadBoard();
			}

			var loadBoard = function () {
				console.log("loading board...");
				$.post("/getBoardState", function (data) {
					board = data;
					drawNewBoard(data);
					//remove loop so i can debug properly
					//t = setTimeout(loadBoard,2000);
					//t = setTimeout(getDeltas,2000);
				});
			}

			var drawNewBoard = function (newBoard) {
				console.log("drawing board");
				console.log(newBoard)
				for (var i = 0; i <= maxX; i++) {
					for (var j = 0; j <= maxY; j++) {
						var boardObj = newBoard[i][j];
						if (boardObj.type == "Space") {
							//do nothing
							var xPos = boardObj.position.x;
							var yPos = boardObj.position.y;
							var newSpace = paper.rect(xPos*50,yPos*50,50,50);
							newSpace.attr({fill:"green"});
						} else if (boardObj.type == "Ship") {
							var xPos = boardObj.position.x;
							var yPos = boardObj.position.y;
							var heading = boardObj.facing;
							var shipId = boardObj.shipId;
							var playerId = boardObj.playerId;
							//var newShip = paper.rect(xPos*50,yPos*50,50,50);
							var newShip = paper.triangle(xPos*50+25,yPos*50+10,30);


							shipRaphaelHash[shipId] = newShip.id

							if (heading == "up") {
								//do nothing, it's fine
							} else if (heading == "right") {
								newShip.transform("r90");
							} else if (heading == "down") {
								newShip.transform("r180");
							} else if (heading == "left") {
								newShip.transform("r270");
							} else {
								console.log('asdfasdfasdf');
							}

							//console.log("SHIP!!!");
							//console.log(boardObj);
							newShip.node.id = "ship"+boardObj.shipId;
							//$(newShip.node).attr("class",boardObj.playerId)
							//newShip.node.class = boardObj.playerId;

							if (playerId === "playerRight") {
								newShip.attr({fill:"blue"});
							} else if (playerId === "playerLeft") {
								newShip.attr({fill:"red"});
							} else {
								console.log("wat");
							}
						} else {
							alert('wat');
						}
					}
				}
				putShipsOnTop();
			}

			var putShipsOnTop = function () {
				for (i in shipRaphaelHash) {
					paper.getById(shipRaphaelHash[i]).toFront()
				}
			}

			var updateBoard = function (data) {
				console.log('updating!');
				console.log(data)
				clearBullets()
				var newBoard = data.board;
				var turns = data.turns;
				var moves = data.moves;
				var shots = data.shots;
				var firstDestroyed = data.destroyed.filter(function (n) {return n.manner=="crashed"});
				var secondDestroyed = data.destroyed.filter(function (n) {return n.manner=="shots"});

				//verifyBoard(newBoard);
				displayTurnsAndMoves(turns,moves)
				displayDestruction(firstDestroyed);
				displayShots(shots);
				displayDestruction(secondDestroyed);
				board = newBoard;
			}


			//accepts a list of ships that have turned and moves
			//ex: [{shipId: foo},{shipId: bar}]...
			//these ships are in their final location, so we just need to compare against our local copy

			var displayTurnsAndMoves = function (turns, moves) {
				console.log('displayingTurns');
				for (i in turns) {
					console.log('TURNING!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
					var ship = turns[i].ship;
					var shipId = ship.shipId;
					var facing = turns[i].direction;
					//var oldFacing = board[ship.position.x][ship.position.y].facing;
					var turn = null;
					var dirToDeg = {
						'up' : 0,
						'right' : 90,
						'down' : 180,
						'left' : 270
					}

					var relRot = {
						'right': 90,
						'left' : -90
					}
					//var degree = dirToDeg[facing] - dirToDeg[oldFacing]
					var degree = relRot[facing]
					paper.getById(shipRaphaelHash[shipId]).transform("...r"+degree)
					//paper.getById(shipRaphaelHash[shipId]).transform("...r"+degree)
				}
				console.log('displayingMoves');
				for (i in moves) {
					console.log('translation!!!!!')
					var ship = moves[i].ship;
					var shipId = ship.shipId;
					var distance = moves[i].distance;
					//paper.getById(shipRaphaelHash[shipId]).transform("r180");

					paper.getById(shipRaphaelHash[shipId]).transform("...t0,-"+distance*50);
					//paper.getById(shipRaphaelHash[shipId]).animate({transform: "...t"+distance*50})
				}
			}

			var bulletLocations = [];

			var drawBullet = function (x,y) {
				console.log("X: "+x);
				console.log("Y: "+y);
				//var newShip = paper.triangle(xPos*50+25,yPos*50+10,30);
				var bullet = paper.circle(x*50+25,y*50+25,10);
				bullet.attr({fill:"black"});
				bulletLocations.push(bullet);
			}

			var displayShots = function (shots) {
				console.log("display shooting");
				for (i in shots) {
					var ship = shots[i].ship;
					var shipId = ship.shipId;
					var shipX = ship.position.x;
					var shipY = ship.position.y;
					var bulletX = shots[i].finalDest.x;
					var bulletY = shots[i].finalDest.y;

					if ((shipX !== bulletX) && (shipY !== bulletY)) {
						console.log("something terrible has happened :(");
						break;
					}

					if (shipY === bulletY) {
						console.log("ships have same Y");
						if (shipX > bulletX) {
							for (var i = bulletX; i < shipX; i++) {
								drawBullet(i,bulletY);
								
							}
						} else if (shipX < bulletX) {
							for (var i = shipX+1; i <= bulletX; i++) {
								drawBullet(i,bulletY);
						
							}
						}
					} else if (shipX === bulletX) {
						if (shipY > bulletY) {
							for (var i = bulletY; i < shipY; i++) {
								drawBullet(bulletX,i);
								
							}
						} else if (shipY < bulletY) {
							for (var i = shipY+1; i <= bulletY; i++) {
								drawBullet(bulletX,i);
								
							}
						}
					}
				}
			}

			var clearBullets = function () {
				console.log("clearing bullets");
				for (i in bulletLocations) {
					bulletLocations[i].remove();
				}
				bulletLocations = [];
			}

			var fireShot = function () {
				displayShots([{ship: {shipId: 3, position: {x: 9, y:8}}, finalDest: {x: 7, y:8}}]);
			}

			var displayDestruction = function (destroyed) {
				console.log("destroying");
				console.log(destroyed)
				for (i in destroyed) {
					//var ship = destroyed[i].ship;
					//var shipId = ship.shipId;
					var shipId = destroyed[i].shipId
					paper.getById(shipRaphaelHash[shipId]).remove();
				}
			}
		</script>
	</head>

	<body>
		<div class="navbar navbar-fixed-top">
			<div class="navbar-inner">
				<div class="container">
					<a class="brand" href="#">Gala</a>
				</div>
			</div>
		</div>
		<div id="content">
			<div class="hero">
				<h1>Tactical View</h1>
				<br>
				<p>Command your robots using this tactical grid. Simply dictate your orders with the interface on the right, and then watch the battle unfold!</p>
			</div>
			<div class="container">


				<div class="row">
					<div class="span6" id="gameBoardDiv">
					</div>

					<div class="span6" id="ordersDiv">
						<textarea cols="40" rows="25" id="ordersForm" placeholder="Code goes in here!"></textarea>
					</div>

					<div class="span6" id="ordersDiv">
						<button id="submitOrders" class="btn btn-primary">SUBMIT</button>
					</div>


				</div>

				<br>



				<hr>
				<footer>
					<p>&copy; Ajay Tripathy & Kevin Hwang 2012</p>
				</footer>
			</div>
		</div>
		



	</body>
</html>