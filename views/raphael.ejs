<html>
	<head>
		<meta charset='utf-8'>
		<meta name="description" content="Gala: Learn how to program by commanding a robot army in space!">
		<meta name="author" content="Kevin Hwang & Ajay Tripathy">
		<title>RAPHAEL TEST</title>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
		<link href="http://twitter.github.com/bootstrap/assets/css/bootstrap.css" rel="stylesheet">
		<link href="http://twitter.github.com/bootstrap/assets/css/bootstrap-responsive.css" rel="stylesheet">
		<link href="/static/raphael.css" rel="stylesheet">

		<!--HTML5 shim, for IE6-8 support of HTML5 elements. Does it actually work? No clue, but here's to hoping it does!-->

		<!--[if lt IE 9]>
			<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		<![endif]-->

		<script src="/static/raphael-min.js"></script>
		<script>
			//this should realy come with Raphael but it doesn't.
			Raphael.fn.triangle = function (x, y, size) {
				var path = ["M",x,y];
				path = path.concat(["L", (x + size/2), (y+size)]);
				path = path.concat(["L", (x - size / 2), (y+size)]);
				return this.path(path.concat(["z"]).join(" "));
			}
		</script>
		<script>
			var board = null;

			var shipRaphaelHash = {}

			var maxX = 9;
			var maxY = 9;

			var t = null;
			var paper = null;

			$(document).ready(function () {
				console.log("ready and waiting");


				board = new Array(maxX+1);

				for (var i = 0; i <= maxX; i++) {
					board[i] = new Array(maxX+1);
				}

				for (var i = 0; i <= maxX; i++) {
					for (var j = 0; j <= maxY; j++) {
						board[i][j] = null;
					}
				}
				initializeBoard();
			});
		</script>


		<script>
			//raphael's grid system goes: x: 0 -> 9 and y: 9 -> 0 (i.e. y increases from top to bottom)
			//todo: fix it :3

			var t = null;

			var allShips = [];


			var initializeBoard = function () {
				paper = Raphael("gameBoardDiv",500,500);
				for (var i = 0; i <= maxX; i++) {
					for (var j = 0; j <= maxY; j++) {
						var rect = paper.rect(i*50,j*50,50,50);
						rect.attr({fill: "green"});
						//rect.node.id="cell"+i+","+j
					}
				}
				t = setTimeout(loadBoard,2000);
			}

			var loadBoard = function () {
				console.log("loading board...");
				$.post("/getBoardState", function (data) {
					board = data;
					drawNewBoard(data);
					//remove loop so i can debug properly
					t = setTimeout(loadBoard,2000);
				});
			}

			var drawNewBoard = function (newBoard) {
				console.log("drawing board");
				console.log(newBoard)
				for (var i = 0; i <= maxX; i++) {
					for (var j = 0; j <= maxY; j++) {
						var boardObj = newBoard[i][j];
						if (boardObj.type == "Space") {
							//do nothing
							var xPos = boardObj.position.x;
							var yPos = boardObj.position.y;
							var newSpace = paper.rect(xPos*50,yPos*50,50,50);
							newSpace.attr({fill:"green"});
						} else if (boardObj.type == "Ship") {
							var xPos = boardObj.position.x;
							var yPos = boardObj.position.y;
							var heading = boardObj.facing
							var shipId = boardObj.shipId
							//var newShip = paper.rect(xPos*50,yPos*50,50,50);
							var newShip = paper.triangle(xPos*50+25,yPos*50+10,30);


							shipRaphaelHash[shipId] = newShip.id

							if (heading == "up") {
								//do nothing, it's fine
							} else if (heading == "right") {
								newShip.transform("r90");
							} else if (heading == "down") {
								newShip.transform("r180");
							} else if (heading == "left") {
								newShip.transform("r270");
							} else {
								console.log('asdfasdfasdf');
							}

							//console.log("SHIP!!!");
							//console.log(boardObj);
							//newShip.node.id = "ship"+boardObj.shipId;
							//$(newShip.node).attr("class",boardObj.playerId)
							//newShip.node.class = boardObj.playerId;
							newShip.attr({fill:"red"});
						} else {
							alert('wat');
						}
					}
				}
			}

			//get a JSON of changes made
			var getDeltas = function () {
				$.post("/getDeltas", function (data) {
					updateBoard(data);
				})
			}

			var updateBoard = function (data) {
				var newBoard = data.board;
				var turns = data.turns;
				var moves = data.moves;
				var shots = data.shots;
				var firstDestroyed = data.destroyed.filter(function (n) {return n.manner=="crashed"});
				var secondDestroyed = data.destroyed.filter(function (n) {return n.manner=="shot"});

				verifyBoard(newBoard);
				displayTurnsAndMoves(turns,moves)
				displayDestruction(firstDestroyed);
				displayShots(shots);
				displayDestruction(secondDestroyed);
				board = newBoard;
			}


			//accepts a list of ships that have turned and moves
			//ex: [{shipId: foo},{shipId: bar}]...
			//these ships are in their final location, so we just need to compare against our local copy
			var displayTurnsAndMoves = function (turns, moves) {
				console.log('displayingTurns');
				for (i in turns) {
					var ship = turns[i];
					var shipId = ship.shipId;
					var facing = ship.facing;
					var oldFacing = board[ship.position.x][ship.position.y].facing;
					var turn = null;
					if (facing == "up") {
						turn = 0;
					} else if (facing == "right") {
						turn = 90;
					} else if (facing == "down") {
						turn = 180;
					} else if (facing == "left") {
						turn = 270;
					} else {
						console.log("????");
					}
					paper.getById(shipRaphaelHash[shipId]).transform("T"+facing)
				}
				console.log('displayingMoves');
				for (i in moves) {
					var ship = turns[i];
					var shipId = ship.shipId;
					var distance = ship.distance
					paper.getById(shipRaphaelHash[shipId]).transform("...t"+distance*50);
				}
			}

			var displayShots = function (shots) {
				console.log("display shooting");
				for (i in shots) {
					var ship = shots[i];
				}
			}
		</script>
	</head>

	<body>
		<div class="navbar navbar-fixed-top">
			<div class="navbar-inner">
				<div class="container">
					<a class="brand" href="#">Gala</a>
				</div>
			</div>
		</div>
		<div id="content">
			<div class="hero">
				<h1>RAPHAEL!!!</h1>
			</div>
			<div class="container">


				<div class="row">
					<div class="span12">
						<p>Do a loop: ask for the board state and then display it.</p>
						<button onclick="fireShot()">TEST SHOOTING ANIMATION</button>
					</div>
				</div>

				<div class="row">
					<div class="span12" id="gameBoardDiv">
					</div>
				</div>

				<hr>
				<footer>
					<p>&copy; Ajay Tripathy & Kevin Hwang 2012</p>
				</footer>
			</div>
		</div>
		



	</body>
</html>